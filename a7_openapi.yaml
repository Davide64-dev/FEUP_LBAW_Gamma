openapi: 3.0.0

info:
  version: '0.1'
  title: 'Gamma Public API'
  description: 'Web Resources Specification (A7) for Gamma'

servers:
  - url: https://lbaw2391.lbaw.fe.up.pt
    description: Production server

externalDocs:
  description: Find more info here.
  url: https://git.fe.up.pt/lbaw/lbaw2324/lbaw2391/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Feed'
  - name: 'M03: User Administration'
  - name: 'M04: Static Pages'
  - name: 'M05: Users'
  - name: 'M06: Search'
  - name: 'M07: Posts'
  - name: 'M08: Groups'
  - name: 'M09: Notifications'
  - name: 'M10: Comments'
  - name: 'M11: Polls'

paths:

  /login:

    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Get login form view.'

    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to homepage.'
                  value: '/home'
                '302 Failure':
                  description: 'NOT OK. Redirect again to login form.'
                  value: '/login'
            Set-Cookie:
              cookie-name:
                type: string
              cookie-value:
                type: string
              Expires:
                type: string

  /logout:

    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current logged user. Access: USR'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to public feed.'
                  value: '/'

  /register:

    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Register a new user. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Sign-up is ready'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes a new registration request. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: text
                  format: binary
                username:
                  type: string
                email:
                  type: string
                academic_status:
                  type: string
                display_name:
                  type: string
                is_private:
                  type: boolean
              required:
                - email
                - password
                - username
      responses:
        '302':
          description: 'Redirect after the register'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'The user was registered with success. Redirect to his personal page'
                  value: '/users/{id}'
                '302 Failure':
                  description: 'The user was not registered with success. Redirect to the login form'
                  value: '/login'

  /forgot-password:

    get:
      operationId: R106
      summary: 'R106: Forgot Password Form'
      description: 'Get the view for the form where someone can submit a reset password request. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Forgot form password returned'

    post:
      operationId: R107
      summary: 'R107: Send Forgot Password Email Action'
      description: 'Sends an email with a link to a user to reset their password. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'OK. An email with a password link was sent.'

  /reset-password/{token}:

    get:
      operationId: R108
      summary: 'R108: Reset Password Form'
      description: 'Get the view for the form to reset the password. Access: VST'
      tags:
        - 'M01: Authentication'
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Reset the password form returned'

    post:
      operationId: R109
      summary: 'R109: Reset Password'
      description: 'Sends a reset password request. Access: VST'
      tags:
        - 'M01: Authentication'
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                new_password:
                  type: string
                confirm_new_password:
                  type: string
              required:
                - email
                - new_password
                - confirm_new_password
      responses:
        '200':
          description: 'OK. You received a token on your email.'
        '404':
          description: 'Error. Email doesnt exist.'

  /api/sendVerifyEmail:

    post:
      operationId: R110
      summary: 'R110: Send Email Action'
      description: 'Sends an email with a certain type. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'OK. You received a token on your email.'
        '404':
          description: 'Error. Email doesnt exist.'

  /email/verify:

    get:
      operationId: R111
      summary: 'R111: Verify Email Form'
      description: 'Get the view for the text to inform a user they have not verified their email yet. Access: USR'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Email validation notice returned'
  
  /email/verify/{id}/{hash}:
    
    get:
      operationId: R112
      summary: 'R112: Verifies email'
      description: 'When a user goes to this page, their email is verified if it was not already. Access: USR'
      tags:
        - 'M01: Authentication'
      parameters:
        - in: path
          name: id
          description: 'Id of the user'
          schema:
            type: string
          required: true
        - in: path
          name: hash
          description: 'Composed of an hash of the user email address and a signature of it'
          schema:
            type: string
          required: true
          examples:
            example1:
              value: 'afb80b714d7f9139dda0889ec723f26394e06651?expires=1700877924&signature=e12b6a2b6936b90227b6f11ad22443cb3d53161a0ebf68ac0121f1ddb9541f3e'
              summary: 'We pass an hash and its signature, as well as the expiration time'
      responses:
        '200':
          description: 'Email is sucessfully verified'
  
  /email/verification-notification:
    
    post:
      operationId: R113
      summary: 'R113: Resends email verification email'
      description: 'If the previous link expires, the user can request a new one. Access: USR'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Verification email is successfully resent'

  /feed:

    get:
      operationId: R201
      summary: 'R201: Provide popular feed'
      description: 'Get the page with the feed. Access: VST'
      tags:
        - 'M02: Feed'
      responses:
        '200':
          description: 'OK. Show popular feed UI'

  /feed/personal:

    get:
      operationId: R202
      summary: 'R202: Provide personalized feed'
      description: 'Get the page with the feed. Access: USR'
      tags:
        - 'M02: Feed'
      responses:
        '200':
          description: 'OK. Show personalized feed UI'

  /admin/user:

    get: 

      operationId: R301
      summary: 'R301: Show administration page for actions on users'
      description: 'Shows an administration page where the admin can search for users and perform actions on them. Access: ADM'
      tags:
        - 'M03: User Administration'  
      
      responses:
        '200':
          description: 'OK. Show User Administration Page' 

  /admin/user/create:

    get:

      operationId: R302
      summary: 'R302: Shows page to create user'
      description: 'Shows the view for the page where an admin can create a new user. Access: ADM'
      tags:
          - 'M03: User Administration'
    
      responses:
        '200':
          description: 'OK. Show create user page by admin'

  /users/{username}/block:

    post:

      operationId: R303
      summary: 'R303: Blocks an user.'
      description: 'Performs the ban of an user of the application. Access: ADM'
      tags:
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Forbidden. Requester is not an admin'
        '422':
          description: 'Unprocessable Entity. Username does not exist'

  /users/{username}/unblock:

    post:

      operationId: R304
      summary: 'R304: Unblocks user.'
      description: 'Allows an admin to unblock a valid user. Access: ADM'
      tags: 
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Forbidden. Requester is not an admin'
        '422':
          description: 'Unprocessable Entity. Username does not exist'

  /api/admin/search/users/{query}:

    get:
      operationId: R305
      summary: 'R305: Previews the users search result to use for AJAX in the admin page.' 
      description: 'Allows the search for users. Access: ADM'
      parameters:
        - in: path
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
      tags:
        - 'M03: User Administration'
      
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    image:
                      type: string
                    username:
                      type: string
                    e-mail:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                example:
                  - id: 1
                    image: url/of/the/image.jpg
                    username: john_doe
                    e-mail: johndoe@trigger.com
                    academic_status: Student 
                    display_name: John Doe
                    is_private: False
                  - id: 28
                    image: url/of/the/image2.jpg
                    username: carlosbarbossa
                    e-mail: carlosbarbossa@carlosbarbossa.com
                    academic_status: Student 
                    display_name: Carlos Barbossa
                    is_private: False

  /users/{username}:

    get:
      operationId: R501
      summary: 'R501: Profile Action.'
      description: 'Get the page view for a user profile. Access: VST, USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'OK. Show User Profile'
        '403':
          description: 'Forbidden. User doesnt have access to this profile.'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          
    delete:
      operationId: R502
      summary: 'R502: Deletes an user'
      description: 'Allows an authenticated user or admin to delete himself or another user (if admin). Access: USR, ADM'
      tags:
        - 'M05: Users'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
    
      responses:
        '200':
          description: Success
        '422':
          description: Failure. If user not found with username
        '403':
          description: Action forbidden

  /users/{username}/edit:

    get:
      operationId: R503
      summary: 'R503: Edit Profile Form'
      description: 'Provide edit profile form. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Get the view of the edit post form'
        '403':
          description: 'Forbidden. User doesnt own this profile.'
      
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

    put:
      operationId: R504
      summary: 'R504: Edit Profile Action'
      description: 'Processes the edit profile form submission. Access: USR'
      tags:
        - 'M05: Users'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: text
                  format: binary
                username:
                  type: string
                academic_status:
                  type: string
                display_name:
                  type: string
                is_private:
                  type: boolean
                password:
                  type: string
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to profile page.'
                  value: '/users/{id}'
                '302 Failure':
                  description: 'NOT OK. Redirect again to edit profile form.'
                  value: '/users/{id}/edit'

  /api/users/username/{username}:

    get:
      operationId: R505
      summary: 'R505: Retrieve user by username'
      description: 'Get the user information by username. Access: VST, USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    image:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                    role:
                      type: integer
                    tsvectors:
                      type: string
        
      parameters:
        - in: path
          name: username
          description: Username of the user
          schema:
            type: string
          required: true

  /api/users/email/{email}:

    get:
      operationId: R506
      summary: 'R506: Retrieve user by email'
      description: 'Get the user information by email. Access: VST, USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    image:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                    role:
                      type: integer
                    tsvectors:
                      type: string
      parameters:
        - in: path
          name: email
          description: Email of the user
          schema:
            type: string
          required: true

  /users/{username}/friends:

    get:
      operationId: R507
      summary: 'R507: See friends of user'
      description: 'Get the friends of the user and show them. Access: USR (can only see friends of friends).'
      tags: 
        - 'M05: Users'
      responses:
        '200':
          description: 'OK. Show user friends'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Action forbidden'

  /api/users/{username}/friends:

    post:
      operationId: R508
      summary: 'R508: Accept friend request of user'
      description: 'Accept friend request of user with username. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Ok. Friend request accepted'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Action forbidden'
    
    delete:
      operationId: R509
      summary: 'R509: Remove friendship of user'
      description: 'Remove the friendship of user with username. Access: USR (can only remove if friends)'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Ok. Friendship removed'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Failure. Action forbidden'
        '404':
          description: 'Failure. User is not friend'

  /users/{username}/friends/requests:

    get:
      operationId: R510
      summary: 'R511: See pending friend requests'
      description: 'Get the pending friend requests and show them. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Ok. Show friend requests'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Action forbidden'
          

  
  /api/users/{username}/friends/requests:

    post:
      operationId: R511
      summary: 'R511: Send friend request to user'
      description: 'Send friend request to user with username. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Ok. Friend request sent'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Action forbidden'
        '404':
          description: 'Failure. User is already friend'

    delete:
      operationId: R512
      summary: 'R512: Cancel friend request to user'
      description: 'Cancel friend request to user with username. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Ok. Friend request cancelled'
        '422':
          description: 'Failure. If user not found with username'
        '403':
          description: 'Action forbidden'
        '404':
          description: 'Failure. User is not friend'
      
  /post:

    post:
      operationId: R701
      summary: 'R701: Create Post Action'
      description: 'Processes the create post form submission. Access: USR'
      tags:
        - 'M07: Posts'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: text
                  format: binary
                title:
                  type: string
                content:
                  type: string
                is_private:
                  type: boolean
                group:
                  type: string
              required:
                - title
                - content
                - is_private
      responses:
        '302':
          description: 'Redirect after processing the new post information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to post page.'
                  value: '/post/{id}'
                '302 Failure':
                  description: 'NOT OK. Redirect again to create post form.'
                  value: '/post'

    get:
      operationId: R702
      summary: 'R702: Get post page creation'
      description: 'Provide post creation page. Access: USR'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User is not logged in.'

  /api/post/{id}:

    get:
      operationId: R703
      summary: 'R703: Get post from id as JSON'
      description: 'Get post from id. Access: ATH'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the post 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    type: string
                    required: true
                  title:
                    type: string
                    required: true
                  content:
                    type: string
                    required: true
                  date:
                    type: string
                    required: true
                  attachment:
                    type: string
                    required: true
                  group:
                    type: string
                    required: true
                  poll_options:
                    type: array
                    required: false
              example:
                author: Hannah Skylar
                title: MongoDB vs ScyllaDB
                content: Can you provide with an explanation as to which one of those is better?
                date: 2023-10-29
                attachment: null
                group: null
                poll_options: [MongoDb, SchyllaDB]
        '403':
          description: 'Forbidden. User doesnt own this post.'

  /post/{id}:

    get:
      operationId: R704
      summary: 'R704: Get post page'
      description: 'Provide post page. Access: USR, VST, ADM. Visitor can only see public posts while Authenticated User can see private posts from himself, friends or groups. Administrator can see all posts.'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the post 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User not allowed to see post.'

    delete:
      operationId: R705
      summary: 'R705: Delete post'
      description: 'Processes the delete post request. Access: ATH, ADM'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the user 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Post deleted.'
        '403':
          description: 'Forbidden. User doesnt own this post.'

  /post/{id}/edit:

    get:
      operationId: R706
      summary: 'R706: Edit Profile Form'
      description: 'Show edit post form. Access: ATH'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the post 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User doesnt own this post.'

    put:
      operationId: R707
      summary: 'R707: Edit Post Action'
      description: 'Processes the edit post form submission. Access: ATH'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the post 
        schema:
          type: string
        required: false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: text
                  format: binary
                title:
                  type: string
                content:
                  type: string
                is_private:
                  type: boolean
      responses:
        '302':
          description: 'Redirect to post page (post/{id})'
          headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Successful edit. Redirect to post page.'
                 value: '/post/{id}'
               302Failure:
                 description: 'Failed edit. Fix the errors and try again.' 
                 value: '/post/{id}/edit'
        '403':
          description: 'Forbidden'

  /search/{query}:

    get: 
      operationId: R601
      summary: 'R601: Search Action'
      description: 'Allows the search for users, posts and groups. Access: VST, USR'
      tags:
        - 'M06: Search' 
      parameters:
        - in: path
          name: query
          description: Search query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: 'OK. Show Search UI'
    
  /api/search/users/{query}:

    get:
      operationId: R602
      summary: 'R602: Previews the users search result to use for AJAX'
      description: 'Allows the search for users. Access: VST, USR'
      tags:
        - 'M06: Search'
      parameters:
      - in: path
        name: query
        description: String to use for full-text search
        schema:
          type: string
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    image:
                      type: string
                    username:
                      type: string
                    e-mail:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                example:
                  - id: 1
                    image: url/of/the/image.jpg
                    username: john_doe
                    e-mail: johndoe@trigger.com
                    academic_status: Student 
                    display_name: John Doe
                    is_private: False
                  - id: 28
                    image: url/of/the/image2.jpg
                    username: carlosbarbossa
                    e-mail: carlosbarbossa@carlosbarbossa.com
                    academic_status: Student 
                    display_name: Carlos Barbossa
                    is_private: False

  /api/search/posts/{query}:

    get: 
      operationId: R603
      summary: 'R603: Posts Search Action'
      description: 'Allows the search for posts. Access: VST, USR'
      tags:
        - 'M06: Search'
      parameters:
        - in: path
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    author:
                      type: integer
                    title:
                      type: string
                    content:
                      type: string
                    attachement:
                      type: string
                    group_id:
                      type: integer
                    is_private:
                      type: boolean

  /api/search/groups/{query}:

    get:
      operationId: R604
      summary: 'R604: Previews the groups search result to use for AJAX'
      description: 'Allows the search for groups. Access: VST, USR'
      tags:
        - 'M06: Search'
      parameters:
      - in: path
        name: query
        description: String to use for full-text search
        schema:
          type: string
        required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    is_private:
                      type: boolean
                example:
                  - id: 1
                    name: Prolog Enthusiasts
                    description: A community for discussing Prolog programming language and related topics
                    is_private: False
                  - id: 2
                    name: Tech Enthusiasts
                    description: A group dedicated to discussing the latest technology trends and innovations
                    is_private: True
    
   
  /notifications:

    get: 
      operationId: R901
      summary: 'R901: Notifications page'
      description: 'Page where a user can view their notifications. Access: USR'
      tags:
        - 'M09: Notifications' 
      responses:
        '200':
          description: 'OK. Show Search UI'
        '302':
          description: 'Redirect if user is logged out.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to login page.'
                  value: '/login'
         
  /api/notifications/{filter}:
    get: 
      operationId: R902
      summary: 'R902: Notifications cards'
      description: 'Returns cards for the notifications that match the filter or all of them if filter is null. Access: USR'
      parameters:
        - in: path
          name: filter
          schema:
            type: string
          required: true
          examples:
            reactions:
              value: reactions
            comments:
              value: comments
      tags:
        - 'M09: Notifications' 
      responses:
        '200':
          description: 'HTML with the notification cards'
  /users/{username}/appban/appeal:

  /comment/{id}/reaction:
    get: 
      operationId: R1001
      summary: 'R1001: Comment reactions'
      description: 'Returns a list with a comment reaction of each type. Access: USR'
      parameters:
        - in: path
          name: id
          description: 'Id of the comment'
          schema:
            type: string
          required: true
      tags:
        - 'M10: Comments' 
      responses:
        '200':
          description: 'List of each type of reactions of the comments'
          content:
            application/json:
              examples:
                example1:
                  value:
                    "fa-heart":
                      - 1
                      - "heart-color"
                      - "HEART"
    post:
      operationId: R1002
      summary: 'R1002: Add reaction to comment'
      description: 'Adds a reaction to a comment. Access: USR'
      parameters:
        - in: path
          name: id
          description: 'Id of the comment'
          schema:
            type: string
          required: true
      tags:
        - 'M10: Comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  required: true
          examples:
            summary: 'Add a like to a comment'
            value:
              type: 'LIKE'

      responses:
        '200':
          description: 'Adds reaction and sends notification to comment author'
        '403':
          description: 'Forbidden if we already have this reaction'
 
    delete:
      operationId: R1003
      summary: 'R1003: Removes a reaction from a comment'
      description: 'Removes a reaction from a comment. Access: USR'
      parameters:
        - in: path
          name: id
          description: 'Id of the comment'
          schema:
            type: string
          required: true
      tags:
        - 'M10: Comments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                type:
                  type: string
                  required: true
          examples:
            summary: 'Removes a like from a comment'
            value:
              type: 'LIKE'

      responses:
        '200':
          description: 'Removes reaction from comment' 
        '403':
          description: 'Forbidden if the deleting user does not have this reaction' 
  
    get:
      operationId: R507
      summary: 'R507: Show form to appeal app ban'
      description: 'Shows a page with the form so a user can appeal their app ban. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Get the view of the edit post form'
        '403':
          description: 'Forbidden. User is not banned or it already has appealed the ban'
      
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

  post:
      operationId: R508
      summary: 'R508: Appeal app ban action'
      description: 'Submits the appeal from the user about the app ban they got. Access: USR'
      tags:
        - 'M05: Users'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                reason:
                  type: text
      responses:
        '302':
          description: 'Redirect after submitting user app ban appeal.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to homepage'
                  value: '/'
                '302 Failure':
                  description: 'NOT OK. Redirect again to submit appeal form.'
                  value: '/users/{username}/appban/appeal'

  /api/users/{username}/posts/{filter?}:
    get:
      operationId: R508
      summary: 'R508: Get the posts of a user'
      description: 'Get the posts of a user. Access: USR'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Return JSON with post cards'
        '403':
          description: 'Forbidden. The user is private.'
      
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          name: filter
          schema:
            type: string
          required: false

  /api/post/{id}/comments:

    get:
      operationId: R708
      summary: 'R708: Show comments of post'
      description: 'AJAX endpoint to show comments of posts. Access: USR'
      tags:
        - 'M07: Posts'
      parameters:
      - in: path
        name: id
        description: Id of the post 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'Returns JSON with HTML of the post cards'
        '403':
          description: 'Forbidden. User cannot see this post.'

  /api/group/{group_id}/posts:

    get:
      operationId: R801
      summary: 'R801: Show posts of groups'
      description: 'AJAX endpoint to show posts of groups. Access: USR'
      tags:
        - 'M08: Groups'
      parameters:
      - in: path
        name: id
        description: Id of the group 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'Returns JSON with HTML of the post cards'
        '403':
          description: 'Forbidden. User cannot see the posts of this group'

  /api/group/{id}/members/{filter}:

    get:
      operationId: R802
      summary: 'R802: Show posts of groups'
      description: 'AJAX endpoint to show posts of groups. Access: USR'
      tags:
        - 'M08: Groups'
      parameters:
      - in: path
        name: id
        description: Id of the group 
        schema:
          type: string
        required: true
      - in: path
        name: filter
        description: Role of the user in the group (e.g. Group owner, group member)
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'Returns JSON with HTML of the member cards'
        '403':
          description: 'Forbidden. User cannot see the members of this group'

  /group/{id}/edit:

    get:
      operationId: R803
      summary: 'R803: Edit Group Form'
      description: 'Show edit group form. Access: GRO'
      tags:
        - 'M08: Groups'
      parameters:
      - in: path
        name: id
        description: Id of the group 
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Show Group'
        '403':
          description: 'Forbidden. User doesnt own this group.'

  /group/{id}:

    put:
      operationId: R804
      summary: 'R804: Edit Group Action'
      description: 'Processes the edit group form submission. Access: GRO'
      tags:
        - 'M08: Groups'
      parameters:
      - in: path
        name: id
        description: Id of the group 
        schema:
          type: string
        required: false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: text
                  format: binary
                banner:
                  type: text
                  format: binary
                name:
                  type: string
                description:
                  type: string
                is_private:
                  type: boolean
      responses:
        '302':
          description: 'Redirect to group page (group/{id})'
          headers:
           Location:
             schema:
               type: string
             examples:
               302Success:
                 description: 'Successful edit. Redirect to group page.'
                 value: '/group/{id}'
               302Failure:
                 description: 'Failed edit. Fix the errors and try again.' 
                 value: '/group/{id}/edit'
        '403':
          description: 'Forbidden'

  /poll/{id}:

    post:
      operationId: R1101
      summary: 'R1101: Add vote'
      description: 'Adds a vote to the poll. Access: USR'
      tags:
        - 'M11: Polls'
      parameters:
      - in: path
        name: id
        description: Id of the poll
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Vote added.'
        '403':
          description: 'Forbidden. User is voting on an option they already voted on.'

  delete:
      operationId: R1102
      summary: 'R1102: Remove vote'
      description: 'Removes a vote from the poll. Access: USR'
      tags:
        - 'M11: Polls'
      parameters:
      - in: path
        name: id
        description: Id of the poll
        schema:
          type: string
        required: true
      responses:
        '200':
          description: 'OK. Vote removed.'
        '403':
          description: 'Forbidden. User is trying to remove a vote from an option they did not vote on'
 

