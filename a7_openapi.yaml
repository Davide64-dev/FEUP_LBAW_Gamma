openapi: 3.0.0

info:
  version: '0.1'
  title: 'Gamma Public API'
  description: 'Web Resources Specification (A7) for Gamma'

servers:
  - url: https://lbaw2391.lbaw.fe.up.pt
    description: Production server

externalDocs:
  description: Find more info here.
  url: https://git.fe.up.pt/lbaw/lbaw2324/lbaw2391/-/wikis/eap

tags:
  - name: 'M01: Authentication'
  - name: 'M02: Feed'
  - name: 'M03: User Administration'
  - name: 'M04: Static Pages'
  - name: 'M05: Users'
  - name: 'M06: Search'
  - name: 'M07: Posts'
  - name: 'M08: Groups'

paths:
  /login:
    get:
      operationId: R101
      summary: 'R101: Login Form'
      description: 'Provide login form. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Get login form view.'
    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to homepage.'
                  value: '/home'
                '302 Failure':
                  description: 'NOT OK. Redirect again to login form.'
                  value: '/login'
            Set-Cookie:
              cookie-name:
                type: string
              cookie-value:
                type: string
              Expires:
                type: string

  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current logged user. Access: USR, ADM'
      tags:
        - 'M01: Authentication'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to public feed.'
                  value: '/'
  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Register a new user. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Sign-up is ready'
    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes a new registration request. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: text
                  format: binary
                username:
                  type: string
                email:
                  type: string
                academic_status:
                  type: string
                display_name:
                  type: string
                is_private:
                  type: boolean
              required:
                - email
                - password
                - username
      responses:
        '302':
          description: 'Redirect after the register'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'The user was registered with success. Redirect to his personal page'
                  value: '/users/{id}'
                '302 Failure':
                  description: 'The user was not registered with success. Redirect to the login form'
                  value: '/login'
  /api/sendResetPassword:
    post:
      operationId: R106
      summary: 'R106: Send Email Action'
      description: 'Sends an email with a certain type. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'OK. An email with a password link was sent.'

  /resetPassword/{token}:
    get:
      operationId: R107
      summary: 'R107: Register Form'
      description: 'Get the view for the form to reset the password. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Reset the password form returned'
    post:
      operationId: R108
      summary: 'R108: Reset Password'
      description: 'Sends a reset password request. Access: VST'
      tags:
        - 'M01: Authentication'
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                confirm_new_password:
                  type: string
              required:
                - new_password
                - confirm_new_password
      responses:
        '200':
          description: 'OK. You received a token on your email.'
        '404':
          description: 'Error. Email doesnt exist.'
  /api/sendVerifyEmail:
    post:
      operationId: R109
      summary: 'R109: Send Email Action'
      description: 'Sends an email with a certain type. Access: VST'
      tags:
        - 'M01: Authentication'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'OK. You received a token on your email.'
        '404':
          description: 'Error. Email doesnt exist.'
  /verifyEmail/{token}:
    get:
      operationId: R110
      summary: 'R110: Verify Email Form'
      description: 'Get the view for the form to reset the password. Access: VST'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'Reset the verify email form returned'
    post:
      operationId: R111
      summary: 'R111: Send Verify Email Request'
      description: 'Sends a verify email request to the server'
      tags:
        - 'M01: Authentication'
      responses:
        '200':
          description: 'OK. Email verified.'
  /feed/{type}:
    get:
      operationId: R201
      summary: 'R201: Provide feed form'
      description: 'Get the page with the feed. Access: USR, ADM'
      tags:
        - 'M02: Feed'
      responses:
        '200':
          description: 'OK. Show feed UI'

  /admin/user:
    get: 

      operationId: R301
      summary: 'R301: Show administration page for actions on users'
      description: 'Shows an administration page where the admin can search for users and perform actions on them'
      tags:
        - 'M03: User Administration'  
      
      responses:
        '200':
          description: 'OK. Show User Administration Page' 

  /admin/user/create:
    get:

      operationId: R302
      summary: 'R302: Shows page to create user'
      description: 'Shows the view for the page where an admin can create a new user'
      tags:
          - 'M03: User Administration'
    
      responses:
        '200':
          description: 'OK. Show create user page by admin'

  /users/{username}:

    get:
      operationId: R501
      summary: 'R501: Profile Action'
      description: 'Get the page view for a user profile'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'OK. Show User Profile'
        '403':
          description: 'Forbidden. User doesnt have access to this profile.'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          
    delete:
      operationId: R303
      summary: 'R303: Deletes an user'
      description: 'Allows an authenticated admin to be able to delete an user'
      tags:
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
    
      responses:
        '200':
          description: Success
        '422':
          description: Failure. If user not found with username
        '403':
          description: Action forbidden


  /users/api/username/{username}:
    get:
      operationId: R504
      summary: 'R504: User Data'
      description: 'Get the user information'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    image:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                    role:
                      type: integer
                    tsvectors:
                      type: string
        
      parameters:
        - in: path
          name: username
          description: Username of the user
          schema:
            type: string
          required: true

      

  /users/api/email/{email}:
    get:
      operationId: R505
      summary: 'R505: User Data'
      description: 'Get the user information'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    image:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                    role:
                      type: integer
                    tsvectors:
                      type: string
        
      parameters:
        - in: path
          name: email
          description: Email of the user
          schema:
            type: string
          required: true

  /users/{username}/edit:
    get:
      operationId: R502
      summary: 'R502: Edit Profile Form'
      description: 'Provide edit profile form. Access: ATH'
      tags:
        - 'M05: Users'
      responses:
        '200':
          description: 'Get the view of the edit post form'
        '403':
          description: 'Forbidden. User doesnt own this profile.'
      
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

    put:
      operationId: R503
      summary: 'R503: Edit Profile Action'
      description: 'Processes the edit profile form submission. Access: ATH'
      tags:
        - 'M05: Users'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: text
                  format: binary
                username:
                  type: string
                academic_status:
                  type: string
                display_name:
                  type: string
                is_private:
                  type: boolean
                password:
                  type: string
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to profile page.'
                  value: '/users/{id}'
                '302 Failure':
                  description: 'NOT OK. Redirect again to edit profile form.'
                  value: '/users/{id}/edit'
  /post:
    post:
      operationId: R701
      summary: 'R701: Create Post Action'
      description: 'Processes the create post form submission. Access: ATH'
      tags:
        - 'M07: Posts'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: text
                  format: binary
                title:
                  type: string
                content:
                  type: string
                is_private:
                  type: boolean
                group:
                  type: string
              required:
                - title
                - content
                - is_private
      responses:
        '302':
          description: 'Redirect after processing the new post information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                '302 Success':
                  description: 'OK. Redirect to post page.'
                  value: '/post/{id}'
                '302 Failure':
                  description: 'NOT OK. Redirect again to create post form.'
                  value: '/post'
    get:
      operationId: R702
      summary: 'R702: Get post page creation'
      description: 'Provide post creation page. Access: USR'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User is not logged in.'
  /api/post/{id}:
    get:
      operationId: R703
      summary: 'R703: Get post from id as JSON'
      description: 'Get post from id. Access: ATH'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  author:
                    type: string
                  title:
                    type: string
                  content:
                    type: string
                  date:
                    type: string
                  attachment:
                    type: string
                  group:
                    type: string
              example:
                author: killme
                title: MongoDB vs ScyllaDB
                content: Can you provide with an explanation as to which one of those is better?
                date: 2023-10-29
                attachment: null
                group: null
        '403':
          description: 'Forbidden. User doesnt own this post.'
  /post/{id}:
    get:
      operationId: R704
      summary: 'R704: Get post page'
      description: 'Provide post page. Access: ATH'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User not allowed to see post.'
    delete:
      operationId: R705
      summary: 'R705: Delete post'
      description: 'Processes the delete post request. Access: ATH'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK. Post deleted.'
        '403':
          description: 'Forbidden. User doesnt own this post.'

  /post/{id}/edit:
    get:
      operationId: R706
      summary: 'R706: Edit Profile Form'
      description: 'Provide edit profile form. Access: ATH'
      tags:
        - 'M07: Posts'
      responses:
        '200':
          description: 'OK. Show Post'
        '403':
          description: 'Forbidden. User doesnt own this post.'
    put:
      operationId: R707
      summary: 'R707: Edit Post Action'
      description: 'Processes the edit post form submission. Access: ATH'
      tags:
        - 'M07: Posts'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                attachment:
                  type: text
                  format: binary
                title:
                  type: string
                content:
                  type: string
                is_private:
                  type: boolean
  /search/{query}:

    get: 

      operationId: R601
      summary: 'R601: Search Action'
      description: 'Allows the search for users, posts and groups'
      tags:
        - 'M06: Search'  
      
      responses:
        '200':
          description: 'OK. Show Search UI'
    
  /api/search/users:

    get:
      operationId: R602
      summary: 'R602: Previews the users search result to use for AJAX'
      description: 'Allows the search for users'
      tags:
        - 'M06: Search'
      
      parameters:
      - in: query
        name: query
        description: String to use for full-text search
        schema:
          type: string
        required: false
      
        
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    image:
                      type: string
                    username:
                      type: string
                    e-mail:
                      type: string
                    academic_status:
                      type: string
                    display_name:
                      type: string
                    is_private:
                      type: boolean
                example:
                  - id: 1
                    image: url/of/the/image.jpg
                    username: john_doe
                    e-mail: johndoe@trigger.com
                    academic_status: Student 
                    display_name: John Doe
                    is_private: False
                  - id: 28
                    image: url/of/the/image2.jpg
                    username: carlosbarbossa
                    e-mail: carlosbarbossa@carlosbarbossa.com
                    academic_status: Student 
                    display_name: Carlos Barbossa
                    is_private: False

  /api/search/posts:

    get: 
      operationId: R603
      summary: 'R603: Posts Search Action'
      description: 'Allows the search for posts'
      tags:
        - 'M06: Search'
          
      parameters:
        - in: query
          name: query
          description: String to use for full-text search
          schema:
            type: string
          required: false
      
          responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      author:
                        type: integer
                      title:
                        type: string
                      content:
                        type: string
                      attachement:
                        type: string
                      group_id:
                        type: integer
                      is_private:
                        type: boolean

  /api/search/groups:

    get:
      operationId: R604
      summary: 'R604: Previews the groups search result to use for AJAX'
      description: 'Allows the search for groups'
      tags:
        - 'M06: Search'
      
      parameters:
      - in: query
        name: query
        description: String to use for full-text search
        schema:
          type: string
        required: false
      
        
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    is_private:
                      type: boolean
                example:
                  - id: 1
                    name: Prolog Enthusiasts
                    description: A community for discussing Prolog programming language and related topics
                    is_private: False
                  - id: 2
                    name: Tech Enthusiasts
                    description: A group dedicated to discussing the latest technology trends and innovations
                    is_private: True
    
  /users/{username}/block:
    get:
      
      operationId: R304
      summary: 'R304: Page to block a user'
      description: 'Shows the view of the page where an admin can block an user, providing the reason'
      tags:
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

      responses:
        '200':
          description: 'OK. Show page to block an user'

    post:

      operationId: R305
      summary: 'R305: Deletes an user'
      description: 'Performs the deletion of an user by the admin'
      tags:
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Forbidden. Requester is not an admin'
        '422':
          description: 'Unprocessable Entity. Username does not exist'

  /users/{username}/unblock:
    post:

      operationId: R306
      summary: 'R306: Unblocks user'
      description: 'Allows an admin to unblock a valid user'
      tags: 
        - 'M03: User Administration'

      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true

      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Forbidden. Requester is not an admin'
        '422':
          description: 'Unprocessable Entity. Username does not exist'


        
